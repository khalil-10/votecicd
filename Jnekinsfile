pipeline {
   agent any

   stages {
      stage('Verify Branch') {
         steps {
            echo "$GIT_BRANCH"
         }
      }
      stage('Docker Build') {
         steps {
            sh(script: 'docker images -a')
            sh(script: """
               cd azure-vote/
               docker images -a
               docker build -t jenkins-pipeline .
               docker images -a
               cd ..
            """)
         }
      }
      stage('Start test app') {
         steps {
            pwsh(script: """
               docker-compose up -d
               chmod +x -R ${env.WORKSPACE}
               ./scripts/test_container.ps1
            """)
         }
         post {
            success {
               echo "App started successfully :)"
            }
            failure {
               echo "App failed to start :("
            }
         }
      }
      stage('Run Tests') {
         steps {
            sh(script: """
               pytest ./tests/test_sample.py
            """)
         }
      }
      stage('Stop test app') {
         steps {
            sh(script: """
               docker-compose down
            """)
         }
      }
      stage('Push container'){
          steps{
              dir("$WORKSPACE/azure-vote"){
                 script{
                    docker.withRegistry('https://index.docker.io/v1/ ', 'dockerhub') {
                    def image = docker.build('khalil10/repo1:latest')
                    image.push()
                    }
              }
          }
        }  
      }
       stage('Container Scanning') {
         parallel {
            stage('Run Anchore') {
               steps {
                  pwsh(script: """
                     Write-Output "khalil10/repo1" > anchore_images
                  """)
                  anchore bailOnFail: false, bailOnPluginFail: false, name: 'anchore_images'
               }
            }
            stage('Run Trivy') {
               steps {
                  sleep(time: 30, unit: 'SECONDS')
                  // pwsh(script: """
                  // trivy khalil10/repo1
                  // """)
               }
            }  
         }
         }
         stage('Run Container on Dev Server'){
             steps {
                 script{
                def dockerRun = 'docker run -p 8080:8080 -d --name my-app khalil10/repo1:latest'
                sshagent(['dev-server']) {
                sh "ssh -o StrictHostKeyChecking=no ec2-user@3.85.146.92 ${dockerRun}"
                 }
                 } 
             }
         }
    }
}
